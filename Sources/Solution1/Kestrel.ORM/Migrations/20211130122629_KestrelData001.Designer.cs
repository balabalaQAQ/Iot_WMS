// <auto-generated />
using System;
using Kestrel.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Kestrel.ORM.Migrations
{
    [DbContext(typeof(Dbcontext))]
    [Migration("20211130122629_KestrelData001")]
    partial class KestrelData001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityModel.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("OrderNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Reviewer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SetTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("EntityModel.Product.PCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f838a08a-9012-4ff4-84b3-d14d0d2061ff"),
                            CategoryNum = "ZNJJ-001",
                            Description = "新一代智能家居系列",
                            DisplayName = "Iot设备",
                            IsPseudoDelete = false,
                            Name = "智能家居系列-Iot设备"
                        },
                        new
                        {
                            Id = new Guid("77d79a4e-0f7f-4803-b57c-8bfdc553e2c9"),
                            CategoryNum = "WL-001",
                            Description = "新一代微量级系列",
                            DisplayName = "Iot芯片",
                            IsPseudoDelete = false,
                            Name = "微量级系列-Iot芯片"
                        });
                });

            modelBuilder.Entity("EntityModel.Product.PRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SerUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SetNum")
                        .HasColumnType("int");

                    b.Property<string>("SetTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SetUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("setType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductInfoId");

                    b.ToTable("PRecord");
                });

            modelBuilder.Entity("EntityModel.Product.ProductInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("PCategoryId");

                    b.ToTable("ProductInfo");
                });

            modelBuilder.Entity("EntityModel.RawMaterials.MCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51efd022-5180-4781-a7e8-c978cfdc31e1"),
                            CategoryNum = "STM-32F",
                            Description = "Stm32微型集成MCU",
                            DisplayName = "STM32",
                            IsPseudoDelete = false,
                            Name = "Stm32微型集成MCU（附带WIFI模块）-STM32F3206"
                        },
                        new
                        {
                            Id = new Guid("bbc0b462-dee1-42d7-8858-1a688527c31e"),
                            CategoryNum = "TC01",
                            Description = "映射模块-TC01",
                            DisplayName = "映射模块",
                            IsPseudoDelete = false,
                            Name = "映射模块-TC01"
                        });
                });

            modelBuilder.Entity("EntityModel.RawMaterials.MaterialsInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaterialsID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("MCategoryId");

                    b.ToTable("MaterialsInfo");
                });

            modelBuilder.Entity("EntityModel.RawMaterials.RMRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MaterialsInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SetNum")
                        .HasColumnType("int");

                    b.Property<string>("SetTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SetUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("setType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialsInfoId");

                    b.HasIndex("OrderId");

                    b.ToTable("RMRecord");
                });

            modelBuilder.Entity("EntityModel.Users.IRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("IRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f95a79a-ba01-4c1c-9268-a73c79a9cd9d"),
                            DepartmentName = "管理员",
                            Description = "管理员：拥有用户管理、原料采购管理、产品出入库管理权限",
                            DisplayName = "Adimn",
                            IsPseudoDelete = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("c6ad9093-9c9c-4345-8a74-b48ab87020b6"),
                            DepartmentName = "采购部门",
                            Description = "采购部门：拥有个人信息管理、原料采购信息管理权限。",
                            DisplayName = "Purchase",
                            IsPseudoDelete = false,
                            Name = "PurchasingDepartment"
                        },
                        new
                        {
                            Id = new Guid("d3137fb2-c30f-431b-88c0-3e59230a88b1"),
                            DepartmentName = "生产部门",
                            Description = "生产部门：拥有个人信息管理、原料领取管理、生产货物信息管理、产品入库管理权限",
                            DisplayName = "Production",
                            IsPseudoDelete = false,
                            Name = "ProductionDepartment"
                        },
                        new
                        {
                            Id = new Guid("9d0387d5-795f-4d03-8582-95a82be78851"),
                            DepartmentName = "销售部门",
                            Description = "销售部门：拥有个人信息管理、产品入库管理权限",
                            DisplayName = "Sale",
                            IsPseudoDelete = false,
                            Name = "SaleDepartment"
                        });
                });

            modelBuilder.Entity("EntityModel.Users.IUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadPortrait")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NativePlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Post")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<string>("SortCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("IUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3b145cd-cd37-4dff-b6bf-e141697ab342"),
                            AccessFailedCount = 0,
                            EmployeeNumber = "Admin",
                            IsLockoutEnabled = false,
                            IsPseudoDelete = false,
                            Name = "Administrator",
                            Password = "123456",
                            Phone = 0,
                            RoleId = new Guid("8f95a79a-ba01-4c1c-9268-a73c79a9cd9d"),
                            Sex = false
                        });
                });

            modelBuilder.Entity("EntityModel.Product.PRecord", b =>
                {
                    b.HasOne("EntityModel.Product.ProductInfo", "ProductInfo")
                        .WithMany()
                        .HasForeignKey("ProductInfoId");

                    b.Navigation("ProductInfo");
                });

            modelBuilder.Entity("EntityModel.Product.ProductInfo", b =>
                {
                    b.HasOne("EntityModel.Product.PCategory", "PCategory")
                        .WithMany()
                        .HasForeignKey("PCategoryId");

                    b.Navigation("PCategory");
                });

            modelBuilder.Entity("EntityModel.RawMaterials.MaterialsInfo", b =>
                {
                    b.HasOne("EntityModel.RawMaterials.MCategory", "MCategory")
                        .WithMany()
                        .HasForeignKey("MCategoryId");

                    b.Navigation("MCategory");
                });

            modelBuilder.Entity("EntityModel.RawMaterials.RMRecord", b =>
                {
                    b.HasOne("EntityModel.RawMaterials.MaterialsInfo", "MaterialsInfo")
                        .WithMany()
                        .HasForeignKey("MaterialsInfoId");

                    b.HasOne("EntityModel.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("MaterialsInfo");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EntityModel.Users.IUser", b =>
                {
                    b.HasOne("EntityModel.Users.IRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
